type Mutation {
    login(email: String!, pass: String!): String!
    superAdminLogin(email:String!, pass: String!): String!
    register(email:String!): String!
    validateUser(email:String!, newPassword: String!, lostPasswordCode: String!): String!
    modifyUserRole(email:String!,newUserRole: UserRole!): String!
    inviteUser(email:String!,userRole:UserRole!): String!
    acceptInvitation(password:String,inviteUuid:ID!): String!
    createPendingSet: Set!
    updateSet(setUuid: ID!, title:String,link:String,delete:Boolean,approve:Boolean): String!
    addPoem(setUuid:ID!) : Poem!
    addBanter(poemUuid:ID!) : Banter!
    deleteBanter(poemUuid:ID!, banterUuid:ID!) : String!
    setApproveBanter(banterUuid:ID!,set_uuid:ID!,approve:Boolean!): String!
    updatePoem(poemUuid:ID!, banterUuid:ID, title:String,delete:Boolean,approve:Boolean): String!
    updatePoemIdx(setUuid:ID!, poemAIdx:Int!, poemBIdx:Int!): String!
}

type Query {
    pendingSetByUser(user_uuid:ID!): Set
    poemUuidsBySetUuid(setUuid: ID!) : [ID!]!
    poem(poemUuid:ID!) : Poem
}
enum UserRole {
    LISTENER
    POET
    MODERATOR
    ADMIN
    SUPERADMIN
}
enum SetStatus {
    PENDING
    PUBLISHED
}
type Poem {
    poemUuid: ID!
    originatorUuid: ID!
    creationTs: Int!
    setUuid: ID!
    banterUuid: ID
    title: String!
    idx: Int!
    partOfPoetshuffle: Boolean!
    editorUuid: ID
    approved: Boolean
}
type Banter {
    banterUuid: ID!
    poemUuid: ID!
    originatorUuid: ID!
    creationTs: Int!
    approved: Boolean!
}
type Set {
    setUuid: ID!
    creationTs: Int!
    title: String!
    originatorUuid: ID!
    setStatus: SetStatus!
    link: String!
    editorUuid: ID
    approved: Boolean!
}