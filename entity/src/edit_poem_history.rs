//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "edit_poem_history"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub user_uuid: Uuid,
    pub creation_ts: DateTimeWithTimeZone,
    pub poem_uuid: Option<Uuid>,
    pub edit_title: Option<String>,
    pub edit_link: Option<String>,
    pub edit_idx: Option<i32>,
    pub is_approved: Option<bool>,
    pub is_deleted: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserUuid,
    CreationTs,
    PoemUuid,
    EditTitle,
    EditLink,
    EditIdx,
    IsApproved,
    IsDeleted,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserUuid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Poems,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserUuid => ColumnType::Uuid.def(),
            Self::CreationTs => ColumnType::TimestampWithTimeZone.def(),
            Self::PoemUuid => ColumnType::Uuid.def().null(),
            Self::EditTitle => ColumnType::String(None).def().null(),
            Self::EditLink => ColumnType::String(None).def().null(),
            Self::EditIdx => ColumnType::Integer.def().null(),
            Self::IsApproved => ColumnType::Boolean.def().null(),
            Self::IsDeleted => ColumnType::Boolean.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Poems => Entity::belongs_to(super::poems::Entity)
                .from(Column::PoemUuid)
                .to(super::poems::Column::PoemUuid)
                .into(),
        }
    }
}

impl Related<super::poems::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poems.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
