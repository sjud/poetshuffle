//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use async_graphql::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "set_options"
    }
}

use async_graphql::*;
#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel,SimpleObject)]
#[graphql(concrete(name = "SetOption", params()))]
pub struct Model {
    pub set_uuid: Uuid,
    pub creation_ts: DateTimeWithTimeZone,
    pub originator_uuid: Uuid,
    pub editor_uuid: Uuid,
    pub price: i32,
    pub is_visible: bool,
    pub is_purchasable: bool,
    pub admin_hidden_locked: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    SetUuid,
    CreationTs,
    OriginatorUuid,
    EditorUuid,
    Price,
    IsVisible,
    IsPurchasable,
    AdminHiddenLocked,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    SetUuid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Users2,
    Users1,
    Sets,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::SetUuid => ColumnType::Uuid.def(),
            Self::CreationTs => ColumnType::TimestampWithTimeZone.def(),
            Self::OriginatorUuid => ColumnType::Uuid.def(),
            Self::EditorUuid => ColumnType::Uuid.def(),
            Self::Price => ColumnType::Integer.def(),
            Self::IsVisible => ColumnType::Boolean.def(),
            Self::IsPurchasable => ColumnType::Boolean.def(),
            Self::AdminHiddenLocked => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Users2 => Entity::belongs_to(super::users::Entity)
                .from(Column::EditorUuid)
                .to(super::users::Column::UserUuid)
                .into(),
            Self::Users1 => Entity::belongs_to(super::users::Entity)
                .from(Column::OriginatorUuid)
                .to(super::users::Column::UserUuid)
                .into(),
            Self::Sets => Entity::belongs_to(super::sets::Entity)
                .from(Column::SetUuid)
                .to(super::sets::Column::SetUuid)
                .into(),
        }
    }
}

impl Related<super::sets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
