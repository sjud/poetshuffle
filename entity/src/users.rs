//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "users"
    }
}

use async_graphql::*;
#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, SimpleObject)]
#[graphql(concrete(name = "User", params()))]
pub struct Model {
    pub user_uuid: Uuid,
    pub creation_ts: DateTimeWithTimeZone,
    pub promoter_uuid: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    UserUuid,
    CreationTs,
    PromoterUuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    UserUuid,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    SelfRef,
    Logins,
    Permissions,
    Comments,
    PenNames,
    Orders,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::UserUuid => ColumnType::Uuid.def(),
            Self::CreationTs => ColumnType::TimestampWithTimeZone.def(),
            Self::PromoterUuid => ColumnType::Uuid.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::SelfRef => Entity::belongs_to(Entity)
                .from(Column::PromoterUuid)
                .to(Column::UserUuid)
                .into(),
            Self::Logins => Entity::has_many(super::logins::Entity).into(),
            Self::Permissions => Entity::has_many(super::permissions::Entity).into(),
            Self::Comments => Entity::has_many(super::comments::Entity).into(),
            Self::PenNames => Entity::has_many(super::pen_names::Entity).into(),
            Self::Orders => Entity::has_many(super::orders::Entity).into(),
        }
    }
}

impl Related<super::logins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logins.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permissions.def()
    }
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::pen_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PenNames.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
